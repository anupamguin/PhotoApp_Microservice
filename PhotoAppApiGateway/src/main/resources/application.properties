server.port=9090
spring.application.name=api-gateway
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

#token.secret=anupamGUINISaGoodBoy
# above line commented because get from config server

########################### For Config Server
spring.config.import=optional:configserver:http://localhost:8011
# config server port

######################################
#  Connection Credentials for RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest


					## by Default configuration of Spring cloud
					
## this will enable discovery feature, so to access users-ws api: http://localhost:9090/USERS-WS/users/status
## so by the below line spring auto configure everything on gateway but name of microservices must in 
## capital like USERS-WS in  http://localhost:9090/USERS-WS/users/status 
#spring.cloud.gateway.discovery.locator.enabled=true

## to access microservices with lower case , so after adding the below line url look
## like http://localhost:9090/users-ws/users/status
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

	
				## Configuration Property for Route

spring.cloud.gateway.routes[0].id=users-status-check
spring.cloud.gateway.routes[0].uri= lb://users-ws
# users-ws microsevices register with Eureka ,spring cloud api gateway resolve users-ws name to an exact
# Ip-address & Port, and here lb trans-for Load balancer, that is built in load balancer in spring cloud
spring.cloud.gateway.routes[0].predicates[0]=Path=/users-ws/users/status
# this is java 8 predicates, it will be used to match the request using header or http method and route the 
# request to destination URI
spring.cloud.gateway.routes[0].predicates[1]=Method=GET,POST
spring.cloud.gateway.routes[0].predicates[2]=Header=Authorization, Bearer (.*)
# means if header has Authorization starting with Bearer then regular expression then can only gateway move
# forward the request to user microservice
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie
# we can remove cookies from request header because we only need JWT token from header
# Now to access Users microservice http://localhost:9090/users/status 

## By using Rewrite path we can change the api name that getting from client but internal actual api uri use
## like here
#spring.cloud.gateway.routes[0].predicates[0]=Path=/anu/users/**
spring.cloud.gateway.routes[0].filters[1]=RewritePath=/users-ws/(?<segment>.*),/$\{segment}
spring.cloud.gateway.routes[0].filters[2]=AnupamAuthorizationHeaderFilter
## the above filter is my custom filter ,this filter will be executed before Spring cloud API gateway  
## performs the route and if JWT validation fails then spring cloud api gateway will not around this request,
## this filter is only applied for users microservices , if we use this filter to other microservices then
## we have to add this filter to by the same above lines 




spring.cloud.gateway.routes[1].id=users-ws
spring.cloud.gateway.routes[1].uri=lb://users-ws
spring.cloud.gateway.routes[1].predicates[0]=Path=/users-ws/users/register
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1]=RewritePath=/users-ws/(?<segment>.*),/$\{segment}

spring.cloud.gateway.routes[2].id=users-ws-login
spring.cloud.gateway.routes[2].uri=lb://users-ws
spring.cloud.gateway.routes[2].predicates[0]=Path=/users-ws/users/authenticate
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1]=RewritePath=/users-ws/(?<segment>.*),/$\{segment}

spring.cloud.gateway.routes[3].id=users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri=lb://users-ws
spring.cloud.gateway.routes[3].predicates[0]=Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2]=Header=Authorization,Bearer (.*)
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1]=RewritePath=/users-ws/(?<segment>.*),/$\{segment}
spring.cloud.gateway.routes[3].filters[2]=AnupamAuthorizationHeaderFilter